# streamlit_app.py

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# ----------------------
# Passo 1: Objetivo do Estudo
# ----------------------
st.title("üîç Pipeline de Gamifica√ß√£o Educacional - PFC")

st.markdown("""
## üéØ Objetivo do Estudo
Este aplicativo apresenta de forma interativa o funcionamento do pipeline de gamifica√ß√£o do projeto **PFC - Provocando Futuros Cientistas**.

Ele visa atribuir pontua√ß√µes aos alunos com base em presen√ßas, participa√ß√µes e atividades, transformando o engajamento em **PFCoins** (moeda gamificada).
""")

# ----------------------
# Passo 2: Upload dos Dados
# ----------------------
st.sidebar.title("üì• Upload dos Arquivos")
matricula_file = st.sidebar.file_uploader("Lista de Matr√≠culas (CSV)", type=["csv"])
presenca_file = st.sidebar.file_uploader("Lista de Presen√ßas (CSV)", type=["csv"])
atividade_file = st.sidebar.file_uploader("Cadastro de Atividades (CSV)", type=["csv"])

if matricula_file and presenca_file and atividade_file:
    try:
        df_matricula = pd.read_csv(matricula_file)
        df_presenca = pd.read_csv(presenca_file)
        df_atividades = pd.read_csv(atividade_file)

        # ----------------------
        # Passo 3: An√°lise da Estrutura
        # ----------------------
        st.markdown("## üß± Estrutura Inicial dos Dados")
        st.subheader("Lista de Matr√≠cula")
        st.dataframe(df_matricula.head())
        st.subheader("Lista de Presen√ßa")
        st.dataframe(df_presenca.head())
        st.subheader("Cadastro de Atividades")
        st.dataframe(df_atividades.head())

        # ----------------------
        # Passo 4: Limpeza e Normaliza√ß√£o
        # ----------------------
        st.markdown("## üßπ Limpeza e Normaliza√ß√£o")

        def normalizar_nomes(nome):
            return nome.strip().lower().replace(" ", "")

        df_presenca["Nome"] = df_presenca["Nome"].astype(str).apply(normalizar_nomes)
        df_matricula["Nome"] = df_matricula["Nome"].astype(str).apply(normalizar_nomes)

        df = pd.merge(df_presenca, df_matricula, on="Nome", how="left")

        # ----------------------
        # Passo 5: AED - Visualiza√ß√µes
        # ----------------------
        st.markdown("## üìä An√°lise Explorat√≥ria dos Dados")
        if "Presen√ßa" in df.columns:
            contagem = df["Presen√ßa"].value_counts()
            fig, ax = plt.subplots()
            ax.bar(contagem.index, contagem.values)
            ax.set_title("Distribui√ß√£o de Presen√ßas e Faltas")
            ax.set_ylabel("Quantidade")
            st.pyplot(fig)
        else:
            st.warning("Coluna 'Presen√ßa' n√£o encontrada no arquivo de presen√ßa.")

        # ----------------------
        # Passo 6: Prompt/Gerador dos Dados
        # ----------------------
        st.markdown("## ‚öôÔ∏è Prompt de Gera√ß√£o de Dados")
        st.code("""
Regras = {
    "Presencas": 100,
    "Faltas": -100,
    "Termo de Compromisso": 100,
    "Atividades Gerais": 30,
    "Clube de Ci√™ncias": 100,
    # ... outras regras ...
}
""", language='python')

        # ----------------------
        # Passo 7: Interpreta√ß√£o dos Resultados
        # ----------------------
        st.markdown("## üß† Interpreta√ß√£o dos Resultados")
        if "Presen√ßa" in df.columns:
            df["PFCoins"] = df["Presen√ßa"].map({"Presente": 100, "Falta": -100})
            ranking = df.groupby("Nome")["PFCoins"].sum().sort_values(ascending=False).reset_index()
            st.dataframe(ranking)
            st.success("üéâ O pipeline foi executado com sucesso e o ranking foi gerado!")
        else:
            st.error("A coluna 'Presen√ßa' n√£o est√° dispon√≠vel para gerar o ranking.")

    except Exception as e:
        st.error(f"Erro ao processar os arquivos: {e}")
else:
    st.warning("Por favor, envie os 3 arquivos para iniciar o processamento.")
